{"version":3,"sources":["assets/ml6-logo.svg","components/TensorflowJsModel.js","components/LinkBar.js","components/Main.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["module","exports","TensorflowJsModel","props","componentDidMount","navigator","mediaDevices","getUserMedia","video","facingMode","then","stream","setState","prevState","videoTag","Object","assign","current","srcObject","onplay","width","state","videoWidth","height","videoHeight","catch","console","log","mainLoop","predict","inputData","a","modelLoaded","tf","model","fromPixels","resizeNearestNeighbor","toFloat","expandDims","data","predictionResult","canvasTag","getContext","drawImage","getImageData","requestAnimationFrame","initializeModel","loadingModel","render","className","hidden","ref","autoPlay","style","onClick","uk-spinner","React","createRef","isPredicting","Component","LinkBar","data-uk-navbar","to","Main","exact","path","component","Header","href","src","image","alt","uk-svg","Footer","Date","getFullYear","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.df6508e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ml6-logo.57f43b3c.svg\";","import React, { Component } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nclass TensorflowJsModel extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoTag: React.createRef(),\n            canvasTag: React.createRef(),\n            width: 50,\n            height: 50,\n            predictionResult: null,\n            isPredicting: null,\n            model: null,\n            loadingModel: false,\n            modelLoaded: false\n        };\n    }\n\n    componentDidMount = () => {\n        navigator.mediaDevices\n        .getUserMedia({video: {facingMode: \"environment\"}})\n        .then(stream => {\n            this.setState(prevState => {\n                let videoTag = Object.assign({}, prevState.videoTag)\n                videoTag.current.srcObject = stream\n\n\n                videoTag.current.onplay = () => {this.setState({\n                    width: this.state.videoTag.current.videoWidth,\n                    height: this.state.videoTag.current.videoHeight,\n\n                })}\n\n\n                return { videoTag };\n            })\n          })\n        .catch(console.log);\n        this.mainLoop();\n    }\n\n    predict = async (inputData) => {\n        if (this.state.modelLoaded) {\n            await tf.tidy( () => {\n                return this.state.model.predict(\n                    tf.sub(1, tf.mul(2, tf.div(tf.browser.fromPixels(inputData), 255)),1)\n                     .resizeNearestNeighbor([224,224])\n                     .toFloat()\n                     .expandDims()\n                     )\n                   }\n                ).data()\n                 .then(data => { this.setState({predictionResult: data}) })\n             }\n    }\n\n    mainLoop = () => {\n        this.state.canvasTag.current.getContext('2d').drawImage(this.state.videoTag.current, 0, 0);\n        const inputData = this.state.canvasTag.current.getContext('2d')\n                          .getImageData(0,0, this.state.canvasTag.current.width, this.state.canvasTag.current.height)\n        this.predict(inputData)\n        requestAnimationFrame(this.mainLoop)\n    }\n\n    initializeModel = async () => {\n        this.setState({loadingModel: true})\n        const modelAPI = \"https://raw.githubusercontent.com/fredo838/fredo838.github.io/master/model/model.json\"\n        const model = await tf.loadLayersModel(modelAPI)\n        this.setState({model: model, loadingModel: false, modelLoaded: true})\n    }\n\n\n    render = () => {\n      return (\n        <div>\n          <div className=\"uk-flex uk-flex-center\">\n            <video\n              hidden\n              ref={this.state.videoTag}\n              autoPlay>\n            </video>\n          </div>\n          <div className=\"uk-flex uk-flex-center\">\n            <canvas\n              style={{ \"borderStyle\": \"solid\" }}\n              ref={this.state.canvasTag}\n              width={this.state.width}\n              height={this.state.height}>\n            </canvas>\n          </div>\n          <div className=\"uk-flex uk-flex-center\">\n            <button className=\"uk-button uk-button-default\" onClick={this.initializeModel}>\n               Start\n            </button>\n          </div>\n          {(this.state.loadingModel) ?\n           (<div className=\"uk-flex uk-flex-center\">\n              <div className=\"uk-spinner\" uk-spinner=\"ratio : 3\"></div>\n            </div>) :\n           (<div></div>)\n          }\n          <div className=\"uk-flex uk-flex-center\">\n            <div>\n                {this.state.predictionResult}\n            </div>\n          </div>\n        </div>\n        )\n      }\n    }\n\nexport { TensorflowJsModel }\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass LinkBar extends Component {\n  // The LinkBar Componenent is used to navigate between pages.\n  render = () => {\n    return (\n      <header>\n        <div className=\"uk-container\">\n          <nav className=\"uk-navbar-transparent\" data-uk-navbar>\n            <div className=\"uk-navbar-center uk-visible@m\">\n              <ul className=\"uk-navbar-nav\">\n                <li><Link to=\"/TensorflowJsModel\">Model</Link></li>\n              </ul>\n            </div>\n          </nav>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport { LinkBar }","import React, { Component } from 'react';\nimport { TensorflowJsModel } from './TensorflowJsModel';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { LinkBar } from './LinkBar'\n\nclass Main extends Component {\n    render = () => {\n      return (\n        <main className=\"uk-container-large uk-align-center\">\n        <BrowserRouter>\n          <LinkBar/>\n          <Route exact path=\"/\" component={TensorflowJsModel}/>\n          <Route exact path=\"/TensorflowJsModel\" component={TensorflowJsModel}/>\n        </BrowserRouter>\n        </main>\n      )\n    }\n}\n\nexport { Main }","import React, { Component } from 'react';\nimport image from '../assets/ml6-logo.svg';\n\nclass Header extends Component {\n  render = () => {\n    return (\n      <header>\n        <div className=\"uk-container\">\n          <a className=\"uk-navbar-item uk-logo\" href=\"/\">\n            <img width=\"140\" src={image} alt=\"ML6-logo\" uk-svg=\"true\"/>\n          </a>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport { Header }","import React, { Component } from 'react';\n\n\nclass Footer extends Component {\n  render = () => {\n    return (\n      <footer className=\"uk-section uk-section-default uk-section-small\">\n        <div className=\"uk-container\">\n          <p className=\"uk-text-small uk-text-center\">\n            ML6 &copy; {new Date().getFullYear()}\n          </p>\n        </div>\n       </footer>\n    )\n  }\n}\n\nexport { Footer };","import React, { Component } from 'react'\nimport { Main } from './components/Main'\nimport { Header } from './components/Header'\nimport { Footer } from './components/Footer'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Main/>\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport { App }","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}